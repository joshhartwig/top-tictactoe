Set up your project with HTML, CSS and Javascript files and get the Git repo all set up.

You’re going to store the gameboard as an array inside of a Gameboard object, so start there! 
Your players are also going to be stored in objects… and you’re probably going to want an object to control the flow of the game itself.

Your main goal here is to have as little global code as possible. Try tucking everything away inside of a module or factory. 
Rule of thumb: if you only ever need ONE of something (gameBoard, displayController), use a module. 
If you need multiples of something (players!), create them with factories.

Set up your HTML and write a JavaScript function that will render the contents of the gameboard array to the webpage (for now you can just manually fill in the array with "X"s and "O"s)

Build the functions that allow players to add marks to a specific spot on the board, and then tie it to the DOM, letting players click on the gameboard to place their marker. 
Don’t forget the logic that keeps players from playing in spots that are already taken!

Think carefully about where each bit of logic should reside. Each little piece of functionality should be able to fit in the game, player or gameboard objects.. 
but take care to put them in “logical” places. Spending a little time brainstorming here can make your life much easier later!

Build the logic that checks for when the game is over! Should check for 3-in-a-row and a tie.

Clean up the interface to allow players to put in their names, include a button to start/restart the game and add a display element that congratulates the winning player!

Optional - If you’re feeling ambitious create an AI so that a player can play against the computer!
Start by just getting the computer to make a random legal move.
Once you’ve gotten that, work on making the computer smart. It is possible to create an unbeatable AI using the minimax algorithm (read about it here, some googling will help you out with this one)
If you get this running definitely come show it off in the chatroom. It’s quite an accomplishment!



// tic tac toe game flow
// draw board
// on launch display empty grid
// get players name, do not start without a name
// have a start, reset buttons

//game board
// 1 2 3
// 4 5 6
// 7 8 9
// gameboard is array of zones
// each zone has column and row c1.r1, marked or free, who marked and which mark (x or o)


// start 
// get player name 
// wait while game.active 
// while playerturn active do nothing
// player selects gridzone 
// select gridzone, check if zone is taken, if open allow else error and return
// check if win?
// player turn inactive
// game turn active
// determine open stops (this should be a function) and select one that is adjacent if possible else random
// game turn inactive check if winner
// loop


functions 

updateDisplay()
- checks each zone and updates associated grid ref with correct marker
- x o or clear

selectGridZone(//get grid ref here) 
- if game.active & player.active 
    - if grid zone is free 
        - mark zone
        - updateDisplay
        - CheckIfWinner

CheckIfWinner()
 - check if either player has 3 adjacent marks

 resetGrid()
 - reset grid, arrays




 ** another idea / future enhancement
 -- maybe store players marks in player array {123}
 -- if autoplay is enabled autoplay player moves and insert 1 sec delay
 -- during end game splash change background of each cell one at a time each second until all
 are covered

 

